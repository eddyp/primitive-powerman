#!/bin/sh -e
#
# Primitive power manager:
# a minimalist "don't simply die" approach to power management
#
#   This script runs a command when a certain batery threshold
#   low level is reached while discharging. By default, it tries
#   to put the system in hibernate, and, if beep is installed,
#   gives an audio warning before running the command.
#
# Execution can be customized by setting variables:
# LIMIT_REGEX - a regex that defines the threshold time on discharge
# CRITICAL_ACTION - the command to run when threshold is reached
# WANT_BEEP - any other value than 'yes' to disable audio warning
#
# Typical usage: Run from cron every 5 minutes
#
# Copyright: Eddy Petri»ôor <eddy.petrisor@gmail.com>, 2013
# License: WTFPL, Version 2
#
#            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE
#                    Version 2, December 2004
#
# Copyright (C) 2004 Sam Hocevar <sam@hocevar.net>
#
# Everyone is permitted to copy and distribute verbatim or modified
# copies of this license document, and changing it is allowed as long
# as the name is changed.
#
#            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE
#   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
#
#  0. You just DO WHAT THE FUCK YOU WANT TO.
#


LIMIT_REGEX=${LIMIT_REGEX-"00:0[0-9]:.."}
CRITICAL_ACTION=${CRITICAL_ACTION-'/usr/sbin/pm-hibernate'}
WANT_BEEP=${WANT_BEEP-'yes'}


ACPICMD=/usr/bin/acpi
if [ ! -x $ACPICMD ]; then
	echo "$ACPICMD not found. Quitting."
	exit 1
fi

BAT_CRITICAL='no' # not necessary, but nice safety net
BAT_CRITICAL="$(${ACPICMD} -b | /bin/grep -q "Discharging, .* ${LIMIT_REGEX} remaining" && echo 'yes' || echo 'no')"


if [ "$BAT_CRITICAL" = 'yes' ]; then
	echo "Critical batery level detected. Running critical action command: ${CRITICAL_ACTION}"
	[ -x /usr/bin/beep -a "$WANT_BEEP" = 'yes' ] && /usr/bin/beep -r 5 || true
	$CRITICAL_ACTION
fi

